{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var h = 0;\n    var _options$useCorrected = options.useCorrectedHSVInterpolation,\n      useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n    if (useCorrectedHSVInterpolation) {\n      var correctedInputRange = [inputRange[0]];\n      var originalH = colors.h;\n      var correctedH = [originalH[0]];\n      for (var i = 1; i < originalH.length; ++i) {\n        var d = originalH[i] - originalH[i - 1];\n        if (originalH[i] > originalH[i - 1] && d > 0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] - 1);\n          correctedH.push(originalH[i]);\n        } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] + 1);\n          correctedH.push(originalH[i]);\n        } else {\n          correctedInputRange.push(inputRange[i]);\n          correctedH.push(originalH[i]);\n        }\n      }\n      h = (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n    } else {\n      h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    }\n    var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v, a);\n  };\n  _f._closure = {\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    hsvToColor: hsvToColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{interpolate,Extrapolate,hsvToColor}=jsThis._closure;{let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolate.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return hsvToColor(h,s,v,a);}}\";\n  _f.__workletHash = 8882134826991;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (7:29)\";\n  return _f;\n}();\nvar toLinearSpace = function () {\n  var _f = function _f(x, gamma) {\n    return x.map(function (v) {\n      return Math.pow(v / 255, gamma);\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\";\n  _f.__workletHash = 1559524611463;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (51:22)\";\n  return _f;\n}();\nvar toGammaSpace = function () {\n  var _f = function _f(x, gamma) {\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n  };\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\";\n  _f.__workletHash = 2913845988966;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (55:21)\";\n  return _f;\n}();\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var _options$gamma = options.gamma,\n      gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n    var outputR = colors.r,\n      outputG = colors.g,\n      outputB = colors.b;\n    if (gamma !== 1) {\n      outputR = toLinearSpace(outputR, gamma);\n      outputG = toLinearSpace(outputG, gamma);\n      outputB = toLinearSpace(outputB, gamma);\n    }\n    var r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n    var g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n    var b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    if (gamma === 1) {\n      return rgbaColor(r, g, b, a);\n    }\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n  };\n  _f._closure = {\n    toLinearSpace: toLinearSpace,\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    rgbaColor: rgbaColor,\n    toGammaSpace: toGammaSpace\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolate,rgbaColor,toGammaSpace}=jsThis._closure;{const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolate.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolate.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}}\";\n  _f.__workletHash = 2815254997232;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (59:29)\";\n  return _f;\n}();\nvar getInterpolateRGB = function () {\n  var _f = function _f(colors) {\n    var r = [];\n    var g = [];\n    var b = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (processedColor !== null && processedColor !== undefined) {\n        r.push(red(processedColor));\n        g.push(green(processedColor));\n        b.push(blue(processedColor));\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,red,green,blue,opacity}=jsThis._closure;{const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}}\";\n  _f.__workletHash = 3521870636649;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (77:26)\";\n  return _f;\n}();\nvar getInterpolateHSV = function () {\n  var _f = function _f(colors) {\n    var h = [];\n    var s = [];\n    var v = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (typeof processedColor === 'number') {\n        var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n        h.push(processedHSVColor.h);\n        s.push(processedHSVColor.s);\n        v.push(processedHSVColor.v);\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    RGBtoHSV: RGBtoHSV,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,RGBtoHSV,red,green,blue,opacity}=jsThis._closure;{const h=[];const s=[];const v=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};}}\";\n  _f.__workletHash = 686412396573;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (96:26)\";\n  return _f;\n}();\nexport var interpolateColor = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    } else if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n    throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n  _f._closure = {\n    interpolateColorsHSV: interpolateColorsHSV,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateRGB: getInterpolateRGB\n  };\n  _f.asString = \"function _f(value,inputRange,outputRange,colorSpace='RGB',options={}){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=jsThis._closure;{if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 9681987669220;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (115:32)\";\n  return _f;\n}();\nexport var ColorSpace;\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}\nexport var interpolateSharableColor = function () {\n  var _f = function _f(value, interpolateConfig) {\n    var colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n      if (!colors) {\n        colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n      return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n      if (!colors) {\n        colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n      return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB,\n      HSV: ColorSpace.HSV\n    },\n    getInterpolateRGB: getInterpolateRGB,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsHSV: interpolateColorsHSV\n  };\n  _f.asString = \"function _f(value,interpolateConfig){const{ColorSpace,getInterpolateRGB,interpolateColorsRGB,getInterpolateHSV,interpolateColorsHSV}=jsThis._closure;{let colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}throw new Error(\\\"Invalid color space provided: \\\"+interpolateConfig.value.colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 17520997050941;\n  _f.__location = \"C:\\\\reactag\\\\newstart3\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\interpolateColor.js (139:40)\";\n  return _f;\n}();","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["C:/reactag/newstart3/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors, options) => {\n    'worklet';\n    let h = 0;\n    const { useCorrectedHSVInterpolation = true } = options;\n    if (useCorrectedHSVInterpolation) {\n        // if the difference between hues in a range is > 180 deg\n        // then move the hue at the right end of the range +/- 360 deg\n        // and add the next point in the original place + 0.00001 with original hue\n        // to not break the next range\n        const correctedInputRange = [inputRange[0]];\n        const originalH = colors.h;\n        const correctedH = [originalH[0]];\n        for (let i = 1; i < originalH.length; ++i) {\n            const d = originalH[i] - originalH[i - 1];\n            if (originalH[i] > originalH[i - 1] && d > 0.5) {\n                correctedInputRange.push(inputRange[i]);\n                correctedInputRange.push(inputRange[i] + 0.00001);\n                correctedH.push(originalH[i] - 1);\n                correctedH.push(originalH[i]);\n            }\n            else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n                correctedInputRange.push(inputRange[i]);\n                correctedInputRange.push(inputRange[i] + 0.00001);\n                correctedH.push(originalH[i] + 1);\n                correctedH.push(originalH[i]);\n            }\n            else {\n                correctedInputRange.push(inputRange[i]);\n                correctedH.push(originalH[i]);\n            }\n        }\n        h =\n            (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n                1) %\n                1;\n    }\n    else {\n        h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    }\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v, a);\n};\nconst toLinearSpace = (x, gamma) => {\n    'worklet';\n    return x.map((v) => Math.pow(v / 255, gamma));\n};\nconst toGammaSpace = (x, gamma) => {\n    'worklet';\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nconst interpolateColorsRGB = (value, inputRange, colors, options) => {\n    'worklet';\n    const { gamma = 2.2 } = options;\n    let { r: outputR, g: outputG, b: outputB } = colors;\n    if (gamma !== 1) {\n        outputR = toLinearSpace(outputR, gamma);\n        outputG = toLinearSpace(outputG, gamma);\n        outputB = toLinearSpace(outputB, gamma);\n    }\n    const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    if (gamma === 1) {\n        return rgbaColor(r, g, b, a);\n    }\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (processedColor !== null && processedColor !== undefined) {\n            r.push(red(processedColor));\n            g.push(green(processedColor));\n            b.push(blue(processedColor));\n            a.push(opacity(processedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        if (typeof processedColor === 'number') {\n            const processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n            h.push(processedHSVColor.h);\n            s.push(processedHSVColor.s);\n            v.push(processedHSVColor.v);\n            a.push(opacity(processedColor));\n        }\n    }\n    return { h, s, v, a };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB', options = {}) => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB, options = {}) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n        options,\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}