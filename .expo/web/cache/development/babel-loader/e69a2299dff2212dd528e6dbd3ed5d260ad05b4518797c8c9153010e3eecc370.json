{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { useCallbackOne } from 'use-memo-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Actions(_ref) {\n  var _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    _ref$optionTintColor = _ref.optionTintColor,\n    optionTintColor = _ref$optionTintColor === void 0 ? Color.optionTintColor : _ref$optionTintColor,\n    icon = _ref.icon,\n    wrapperStyle = _ref.wrapperStyle,\n    iconTextStyle = _ref.iconTextStyle,\n    onPressActionButton = _ref.onPressActionButton,\n    containerStyle = _ref.containerStyle;\n  var _useChatContext = useChatContext(),\n    actionSheet = _useChatContext.actionSheet;\n  var onActionsPress = useCallbackOne(function () {\n    var optionKeys = Object.keys(options);\n    var cancelButtonIndex = optionKeys.indexOf('Cancel');\n    actionSheet().showActionSheetWithOptions({\n      options: optionKeys,\n      cancelButtonIndex: cancelButtonIndex,\n      tintColor: optionTintColor\n    }, function (buttonIndex) {\n      var key = optionKeys[buttonIndex];\n      if (key) {\n        options[key]();\n      }\n    });\n  }, []);\n  var renderIcon = useCallbackOne(function () {\n    if (icon) {\n      return icon();\n    }\n    return _jsx(View, {\n      style: [styles.wrapper, wrapperStyle],\n      children: _jsx(Text, {\n        style: [styles.iconText, iconTextStyle],\n        children: \"+\"\n      })\n    });\n  }, []);\n  return _jsx(TouchableOpacity, {\n    style: [styles.container, containerStyle],\n    onPress: onPressActionButton || onActionsPress,\n    children: renderIcon()\n  });\n}\nActions.propTypes = {\n  onSend: PropTypes.func,\n  options: PropTypes.object,\n  optionTintColor: PropTypes.string,\n  icon: PropTypes.func,\n  onPressActionButton: PropTypes.func,\n  wrapperStyle: StylePropType,\n  containerStyle: StylePropType\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: 26,\n    height: 26,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  wrapper: {\n    borderRadius: 13,\n    borderColor: Color.defaultColor,\n    borderWidth: 2,\n    flex: 1\n  },\n  iconText: {\n    color: Color.defaultColor,\n    fontWeight: 'bold',\n    fontSize: 16,\n    backgroundColor: Color.backgroundTransparent,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAoB,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAUxC,OAAOC,KAAK;AACZ,SAASC,aAAa;AACtB,SAASC,cAAc;AACvB,SAASC,cAAc,QAAQ,cAAc;AAAA;AAY7C,OAAM,SAAUC,OAAO,OAQR;EAAA,wBAPbC,OAAO;IAAPA,OAAO,6BAAG,EAAE;IAAA,4BACZC,eAAe;IAAfA,eAAe,qCAAGN,KAAK,CAACM,eAAe;IACvCC,IAAI,QAAJA,IAAI;IACJC,YAAY,QAAZA,YAAY;IACZC,aAAa,QAAbA,aAAa;IACbC,mBAAmB,QAAnBA,mBAAmB;IACnBC,cAAc,QAAdA,cAAc;EAEd,sBAAwBT,cAAc,EAAE;IAAhCU,WAAW,mBAAXA,WAAW;EACnB,IAAMC,cAAc,GAAGV,cAAc,CAAC,YAAK;IACzC,IAAMW,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACX,OAAO,CAAC;IACvC,IAAMY,iBAAiB,GAAGH,UAAU,CAACI,OAAO,CAAC,QAAQ,CAAC;IACtDN,WAAW,EAAE,CAACO,0BAA0B,CACtC;MACEd,OAAO,EAAES,UAAU;MACnBG,iBAAiB,EAAjBA,iBAAiB;MACjBG,SAAS,EAAEd;KACZ,EACD,UAACe,WAAmB,EAAI;MACtB,IAAMC,GAAG,GAAGR,UAAU,CAACO,WAAW,CAAC;MACnC,IAAIC,GAAG,EAAE;QACPjB,OAAO,CAACiB,GAAG,CAAC,EAAE;;IAElB,CAAC,CACF;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,UAAU,GAAGpB,cAAc,CAAC,YAAK;IACrC,IAAII,IAAI,EAAE;MACR,OAAOA,IAAI,EAAE;;IAEf,OACE,KAAC,IAAI;MAAC,KAAK,EAAE,CAACiB,MAAM,CAACC,OAAO,EAAEjB,YAAY,CAAE;MAAA,UAC1C,KAAC,IAAI;QAAC,KAAK,EAAE,CAACgB,MAAM,CAACE,QAAQ,EAAEjB,aAAa,CAAE;QAAA,UAAC;MAAC;IAClD,EAAO;EAEX,CAAC,EAAE,EAAE,CAAC;EAEN,OACE,KAAC,gBAAgB;IACf,KAAK,EAAE,CAACe,MAAM,CAACG,SAAS,EAAEhB,cAAc,CAAE;IAC1C,OAAO,EAAED,mBAAmB,IAAIG,cAAe;IAAA,UAE9CU,UAAU;EAAE,EACI;AAEvB;AAEAnB,OAAO,CAACwB,SAAS,GAAG;EAClBC,MAAM,EAAE/B,SAAS,CAACgC,IAAI;EACtBzB,OAAO,EAAEP,SAAS,CAACiC,MAAM;EACzBzB,eAAe,EAAER,SAAS,CAACkC,MAAM;EACjCzB,IAAI,EAAET,SAAS,CAACgC,IAAI;EACpBpB,mBAAmB,EAAEZ,SAAS,CAACgC,IAAI;EACnCtB,YAAY,EAAEP,aAAa;EAC3BU,cAAc,EAAEV;CACjB;AAED,IAAMuB,MAAM,GAAGS,UAAU,CAACC,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE;GACf;EACDb,OAAO,EAAE;IACPc,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAExC,KAAK,CAACyC,YAAY;IAC/BC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;GACP;EACDjB,QAAQ,EAAE;IACRkB,KAAK,EAAE5C,KAAK,CAACyC,YAAY;IACzBI,UAAU,EAAE,MAAM;IAClBC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE/C,KAAK,CAACgD,qBAAqB;IAC5CC,SAAS,EAAE;;CAEd,CAAC","names":["PropTypes","React","Color","StylePropType","useChatContext","useCallbackOne","Actions","options","optionTintColor","icon","wrapperStyle","iconTextStyle","onPressActionButton","containerStyle","actionSheet","onActionsPress","optionKeys","Object","keys","cancelButtonIndex","indexOf","showActionSheetWithOptions","tintColor","buttonIndex","key","renderIcon","styles","wrapper","iconText","container","propTypes","onSend","func","object","string","StyleSheet","create","width","height","marginLeft","marginBottom","borderRadius","borderColor","defaultColor","borderWidth","flex","color","fontWeight","fontSize","backgroundColor","backgroundTransparent","textAlign"],"sources":["../src/Actions.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}