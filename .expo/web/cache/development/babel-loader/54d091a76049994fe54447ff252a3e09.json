{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    customDefaultStatus = _ref.defaultStatus,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var openByDefault = restWithDeprecated.openByDefault,\n    lazy = restWithDeprecated.lazy,\n    drawerContentOptions = restWithDeprecated.drawerContentOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      defaultStatus: defaultStatus,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","id","_ref","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sourceRoot":"../../src","sources":["createDrawerNavigator.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}