{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport dayjs from 'dayjs';\nimport Color from \"./Color\";\nimport { StylePropType, isSameDay } from \"./utils\";\nimport { DATE_FORMAT } from \"./Constant\";\nimport { useChatContext } from \"./GiftedChatContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600'\n  }\n});\nexport function Day(_ref) {\n  var _ref$dateFormat = _ref.dateFormat,\n    dateFormat = _ref$dateFormat === void 0 ? DATE_FORMAT : _ref$dateFormat,\n    currentMessage = _ref.currentMessage,\n    previousMessage = _ref.previousMessage,\n    containerStyle = _ref.containerStyle,\n    wrapperStyle = _ref.wrapperStyle,\n    textStyle = _ref.textStyle;\n  var _useChatContext = useChatContext(),\n    getLocale = _useChatContext.getLocale;\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage)) {\n    return null;\n  }\n  return _jsx(View, {\n    style: [styles.container, containerStyle],\n    children: _jsx(View, {\n      style: wrapperStyle,\n      children: _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: dayjs(currentMessage.createdAt).locale(getLocale()).format(dateFormat)\n      })\n    })\n  });\n}\nDay.propTypes = {\n  currentMessage: PropTypes.object,\n  previousMessage: PropTypes.object,\n  nextMessage: PropTypes.object,\n  inverted: PropTypes.bool,\n  containerStyle: StylePropType,\n  wrapperStyle: StylePropType,\n  textStyle: StylePropType,\n  dateFormat: PropTypes.string\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAAA;AAAA;AAAA;AAUlC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK;AACZ,SAASC,aAAa,EAAEC,SAAS;AACjC,SAASC,WAAW;AAGpB,SAASC,cAAc;AAA6B;AAEpD,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE;GACf;EACDC,IAAI,EAAE;IACJC,eAAe,EAAEd,KAAK,CAACe,qBAAqB;IAC5CC,KAAK,EAAEhB,KAAK,CAACiB,YAAY;IACzBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;;CAEf,CAAC;AAcF,OAAM,SAAUC,GAAG,OAOE;EAAA,2BANnBC,UAAU;IAAVA,UAAU,gCAAGlB,WAAW;IACxBmB,cAAc,QAAdA,cAAc;IACdC,eAAe,QAAfA,eAAe;IACfC,cAAc,QAAdA,cAAc;IACdC,YAAY,QAAZA,YAAY;IACZC,SAAS,QAATA,SAAS;EAET,sBAAsBtB,cAAc,EAAE;IAA9BuB,SAAS,mBAATA,SAAS;EAEjB,IAAIL,cAAc,IAAI,IAAI,IAAIpB,SAAS,CAACoB,cAAc,EAAEC,eAAe,CAAC,EAAE;IACxE,OAAO,IAAI;;EAGb,OACE,KAAC,IAAI;IAAC,KAAK,EAAE,CAAClB,MAAM,CAACG,SAAS,EAAEgB,cAAc,CAAE;IAAA,UAC9C,KAAC,IAAI;MAAC,KAAK,EAAEC,YAAa;MAAA,UACxB,KAAC,IAAI;QAAC,KAAK,EAAE,CAACpB,MAAM,CAACQ,IAAI,EAAEa,SAAS,CAAE;QAAA,UACnC3B,KAAK,CAACuB,cAAc,CAACM,SAAS,CAAC,CAC7BC,MAAM,CAACF,SAAS,EAAE,CAAC,CACnBG,MAAM,CAACT,UAAU;MAAC;IAEzB;EACF,EAAO;AAEX;AAEAD,GAAG,CAACW,SAAS,GAAG;EACdT,cAAc,EAAExB,SAAS,CAACkC,MAAM;EAChCT,eAAe,EAAEzB,SAAS,CAACkC,MAAM;EACjCC,WAAW,EAAEnC,SAAS,CAACkC,MAAM;EAC7BE,QAAQ,EAAEpC,SAAS,CAACqC,IAAI;EACxBX,cAAc,EAAEvB,aAAa;EAC7BwB,YAAY,EAAExB,aAAa;EAC3ByB,SAAS,EAAEzB,aAAa;EACxBoB,UAAU,EAAEvB,SAAS,CAACsC;CACvB","names":["React","PropTypes","dayjs","Color","StylePropType","isSameDay","DATE_FORMAT","useChatContext","styles","StyleSheet","create","container","alignItems","justifyContent","marginTop","marginBottom","text","backgroundColor","backgroundTransparent","color","defaultColor","fontSize","fontWeight","Day","dateFormat","currentMessage","previousMessage","containerStyle","wrapperStyle","textStyle","getLocale","createdAt","locale","format","propTypes","object","nextMessage","inverted","bool","string"],"sources":["../src/Day.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}