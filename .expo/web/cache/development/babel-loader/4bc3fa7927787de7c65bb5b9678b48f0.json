{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10,\n    overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = _objectWithoutProperties(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","_ref2","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","_Reanimated$isConfigu","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","overlayAccessibilityLabel","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","_document","body","_document$body","_document$body$addEve","remove","_document2","_document2$body","removeEventListener","_document2$body$remov","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","_ref3","title","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","create","flex"],"sourceRoot":"../../src","sources":["DrawerView.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}