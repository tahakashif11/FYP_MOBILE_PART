{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"pointerEvents\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Platform } from 'expo-modules-core';\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport createElement from 'react-native-web/dist/exports/createElement';\nfunction getElement(component) {\n  try {\n    return findDOMNode(component);\n  } catch (_unused) {\n    return component;\n  }\n}\nfunction setRef(refProp, ref) {\n  if (!refProp) return;\n  if (typeof refProp === 'function') {\n    refProp(ref);\n  } else if ('current' in refProp) {\n    refProp.current = ref;\n  }\n}\nvar Canvas = React.forwardRef(function (props, ref) {\n  return createElement('canvas', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\nvar CanvasWrapper = function CanvasWrapper(_ref) {\n  var pointerEvents = _ref.pointerEvents,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    size = _React$useState2[0],\n    setSize = _React$useState2[1];\n  var ref = React.useRef(null);\n  var _canvasRef = React.useRef(null);\n  function updateCanvasSize() {\n    var canvas = _canvasRef.current;\n    if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n      var _size = getSize();\n      var scale = PixelRatio.get();\n      canvas.style.width = _size.width + \"px\";\n      canvas.style.height = _size.height + \"px\";\n      canvas.width = _size.width * scale;\n      canvas.height = _size.height * scale;\n    }\n  }\n  function getSize() {\n    if (size) {\n      return size;\n    } else if (!ref.current || !Platform.isDOMAvailable) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n    var element = getElement(ref.current);\n    var _element$offsetWidth = element.offsetWidth,\n      width = _element$offsetWidth === void 0 ? 0 : _element$offsetWidth,\n      _element$offsetHeight = element.offsetHeight,\n      height = _element$offsetHeight === void 0 ? 0 : _element$offsetHeight;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  var onLayout = function onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n      width = _event$nativeEvent$la.width,\n      height = _event$nativeEvent$la.height;\n    if (width !== (size == null ? void 0 : size.width) || height !== size.height) {\n      setSize({\n        width: width,\n        height: height\n      });\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  };\n  React.useEffect(function () {\n    if (ref.current != null) {\n      setSize(getSize());\n    }\n  }, [ref]);\n  React.useEffect(function () {\n    updateCanvasSize();\n  }, [size]);\n  React.useEffect(function () {\n    var canvas = _canvasRef.current;\n    if (canvas) {\n      updateCanvasSize();\n    }\n    setRef(props.canvasRef, canvas);\n  }, [_canvasRef]);\n  return React.createElement(View, _objectSpread(_objectSpread({}, props), {}, {\n    pointerEvents: \"box-none\",\n    ref: ref,\n    onLayout: onLayout\n  }), React.createElement(Canvas, {\n    ref: _canvasRef,\n    pointerEvents: pointerEvents,\n    style: StyleSheet.absoluteFill\n  }), children);\n};\nexport default CanvasWrapper;","map":{"version":3,"mappings":"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","names":["Platform","React","findDOMNode","createElement","getElement","component","setRef","refProp","ref","current","Canvas","forwardRef","props","CanvasWrapper","pointerEvents","children","useState","size","setSize","useRef","_canvasRef","updateCanvasSize","canvas","HTMLCanvasElement","getSize","scale","PixelRatio","get","style","width","height","isDOMAvailable","element","offsetWidth","offsetHeight","onLayout","event","nativeEvent","layout","useEffect","canvasRef","View","StyleSheet","absoluteFill"],"sources":["C:\\reactag\\newstart3\\node_modules\\expo-gl\\src\\Canvas.tsx"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { LayoutChangeEvent, PixelRatio, StyleSheet, View, ViewProps } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nfunction getElement(component) {\n  try {\n    return findDOMNode(component);\n  } catch {\n    return component;\n  }\n}\n\nfunction setRef<T>(refProp: React.Ref<T>, ref: T | null) {\n  if (!refProp) return;\n\n  if (typeof refProp === 'function') {\n    refProp(ref);\n  } else if ('current' in refProp) {\n    // @ts-ignore\n    refProp.current = ref;\n  }\n}\n\nconst Canvas = React.forwardRef(\n  (props: React.ComponentProps<typeof View>, ref: React.Ref<HTMLCanvasElement>) =>\n    createElement('canvas', { ...props, ref })\n);\n\nconst CanvasWrapper: React.FunctionComponent<\n  ViewProps & {\n    canvasRef: React.Ref<HTMLCanvasElement>;\n  }\n> = ({ pointerEvents, children, ...props }) => {\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n\n  const ref = React.useRef<View>(null);\n  const _canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  function updateCanvasSize(): void {\n    const canvas = _canvasRef.current;\n    // eslint-disable-next-line no-undef\n    if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n      const size = getSize();\n      const scale = PixelRatio.get();\n\n      canvas.style.width = `${size.width}px`;\n      canvas.style.height = `${size.height}px`;\n\n      canvas.width = size.width * scale;\n      canvas.height = size.height * scale;\n    }\n  }\n\n  function getSize(): { width: number; height: number } {\n    if (size) {\n      return size;\n    } else if (!ref.current || !Platform.isDOMAvailable) {\n      return { width: 0, height: 0 };\n    }\n    const element = getElement(ref.current);\n    const { offsetWidth: width = 0, offsetHeight: height = 0 } = element;\n    return { width, height };\n  }\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    const {\n      nativeEvent: {\n        layout: { width, height },\n      },\n    } = event;\n\n    if (width !== size?.width || height !== size.height) {\n      setSize({ width, height });\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (ref.current != null) {\n      setSize(getSize());\n    }\n  }, [ref]);\n\n  React.useEffect(() => {\n    updateCanvasSize();\n  }, [size]);\n\n  React.useEffect(() => {\n    const canvas = _canvasRef.current;\n    if (canvas) {\n      updateCanvasSize();\n    }\n    setRef(props.canvasRef, canvas);\n  }, [_canvasRef]);\n\n  return (\n    <View {...props} pointerEvents=\"box-none\" ref={ref} onLayout={onLayout}>\n      <Canvas ref={_canvasRef} pointerEvents={pointerEvents} style={StyleSheet.absoluteFill} />\n      {children}\n    </View>\n  );\n};\n\nexport default CanvasWrapper;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}