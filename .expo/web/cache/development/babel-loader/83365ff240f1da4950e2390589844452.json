{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useCallbackOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { warning } from \"./logging\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    maxWidth: 300\n  },\n  quickReply: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    maxWidth: 200,\n    paddingVertical: 7,\n    paddingHorizontal: 12,\n    minHeight: 50,\n    borderRadius: 13,\n    margin: 3\n  },\n  quickReplyText: {\n    overflow: 'visible'\n  },\n  sendLink: {\n    borderWidth: 0\n  },\n  sendLinkText: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17\n  }\n});\nvar sameReply = function sameReply(currentReply) {\n  return function (reply) {\n    return currentReply.value === reply.value;\n  };\n};\nvar diffReply = function diffReply(currentReply) {\n  return function (reply) {\n    return currentReply.value !== reply.value;\n  };\n};\nexport function QuickReplies(_ref) {\n  var currentMessage = _ref.currentMessage,\n    nextMessage = _ref.nextMessage,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? Color.peterRiver : _ref$color,\n    quickReplyStyle = _ref.quickReplyStyle,\n    quickReplyTextStyle = _ref.quickReplyTextStyle,\n    onQuickReply = _ref.onQuickReply,\n    _ref$sendText = _ref.sendText,\n    sendText = _ref$sendText === void 0 ? 'Send' : _ref$sendText,\n    renderQuickReplySend = _ref.renderQuickReplySend;\n  var type = currentMessage.quickReplies.type;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    replies = _useState2[0],\n    setReplies = _useState2[1];\n  var shouldComponentDisplay = useMemo(function () {\n    var hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n    var hasNext = !!nextMessage && !!nextMessage._id;\n    var keepIt = currentMessage.quickReplies.keepIt;\n    if (hasReplies && !hasNext) {\n      return true;\n    }\n    if (hasReplies && hasNext && keepIt) {\n      return true;\n    }\n    return false;\n  }, [currentMessage, nextMessage]);\n  var handlePress = useCallbackOne(function (reply) {\n    return function () {\n      if (currentMessage) {\n        var _type = currentMessage.quickReplies.type;\n        switch (_type) {\n          case 'radio':\n            {\n              handleSend([reply])();\n              return;\n            }\n          case 'checkbox':\n            {\n              if (replies.find(sameReply(reply))) {\n                setReplies(replies.filter(diffReply(reply)));\n              } else {\n                setReplies([].concat(_toConsumableArray(replies), [reply]));\n              }\n              return;\n            }\n          default:\n            {\n              warning(\"onQuickReply unknown type: \" + _type);\n              return;\n            }\n        }\n      }\n    };\n  }, [replies, currentMessage]);\n  var handleSend = function handleSend(repliesData) {\n    return function () {\n      onQuickReply === null || onQuickReply === void 0 ? void 0 : onQuickReply(repliesData.map(function (reply) {\n        return _objectSpread(_objectSpread({}, reply), {}, {\n          messageId: currentMessage._id\n        });\n      }));\n    };\n  };\n  if (!shouldComponentDisplay) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [currentMessage.quickReplies.values.map(function (reply, index) {\n      var selected = type === 'checkbox' && replies.find(sameReply(reply));\n      return _jsx(TouchableOpacity, {\n        onPress: handlePress(reply),\n        style: [styles.quickReply, quickReplyStyle, {\n          borderColor: color\n        }, selected && {\n          backgroundColor: color\n        }],\n        children: _jsx(Text, {\n          numberOfLines: 10,\n          ellipsizeMode: 'tail',\n          style: [styles.quickReplyText, {\n            color: selected ? Color.white : color\n          }, quickReplyTextStyle],\n          children: reply.title\n        })\n      }, reply.value + \"-\" + index);\n    }), replies.length > 0 && _jsx(TouchableOpacity, {\n      style: [styles.quickReply, styles.sendLink],\n      onPress: handleSend(replies),\n      children: (renderQuickReplySend === null || renderQuickReplySend === void 0 ? void 0 : renderQuickReplySend()) || _jsx(Text, {\n        style: styles.sendLinkText,\n        children: sendText\n      })\n    })]\n  });\n}\nQuickReplies.propTypes = {\n  currentMessage: PropTypes.object.isRequired,\n  onQuickReply: PropTypes.func,\n  color: PropTypes.string,\n  sendText: PropTypes.string,\n  renderQuickReplySend: PropTypes.func,\n  quickReplyStyle: StylePropType\n};","map":{"version":3,"mappings":"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","names":["PropTypes","React","useState","useMemo","useCallbackOne","Color","StylePropType","warning","styles","StyleSheet","create","container","flexDirection","flexWrap","maxWidth","quickReply","justifyContent","alignItems","borderWidth","paddingVertical","paddingHorizontal","minHeight","borderRadius","margin","quickReplyText","overflow","sendLink","sendLinkText","color","defaultBlue","fontWeight","fontSize","sameReply","currentReply","reply","value","diffReply","QuickReplies","currentMessage","nextMessage","peterRiver","quickReplyStyle","quickReplyTextStyle","onQuickReply","sendText","renderQuickReplySend","type","quickReplies","replies","setReplies","shouldComponentDisplay","hasReplies","hasNext","_id","keepIt","handlePress","handleSend","find","filter","repliesData","map","messageId","values","index","selected","borderColor","backgroundColor","white","title","length","propTypes","object","isRequired","func","string"],"sourceRoot":"","sources":["../src/QuickReplies.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}