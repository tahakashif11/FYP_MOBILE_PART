{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useRef, useEffect, useState } from 'react';\nimport { askAsync, getAsync } from \"./Permissions\";\nexport function usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isMounted = useRef(true);\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _options$ask = options.ask,\n    ask = _options$ask === void 0 ? false : _options$ask,\n    _options$get = options.get,\n    get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = useCallback(function () {\n    return askAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  var getPermissions = useCallback(function () {\n    return getAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  useEffect(function () {\n    if (ask) {\n      askPermissions();\n    }\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"mappings":";;AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEhE,SAASC,QAAQ,EAAEC,QAAQ;AAmB3B,OAAM,SAAUC,cAAc,CAC5BC,IAAuC,EACP;EAAA,IAAhCC,8EAA8B,EAAE;EAEhC,IAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,gBAAwBE,QAAQ,EAAsB;IAAA;IAA/CO,IAAI;IAAEC,OAAO;EACpB,mBAAoCH,OAAO,CAAnCI,GAAG;IAAHA,GAAG,6BAAG,KAAK;IAAA,eAAiBJ,OAAO,CAAtBK,GAAG;IAAHA,GAAG,6BAAG,IAAI;EAC/B,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;EAMjD,IAAMU,cAAc,GAAGjB,WAAW,CAChC;IAAA,OACEI,QAAQ,kCAAIU,KAAK,EAAC,CAACI,IAAI,CAAC,UAACC,QAAQ,EAAI;MACnC,IAAIV,SAAS,CAACW,OAAO,EAAE;QACrBT,OAAO,CAACQ,QAAQ,CAAC;;IAErB,CAAC,CAAC;EAAA,GACJ,CAACZ,IAAI,CAAC,CACP;EAED,IAAMc,cAAc,GAAGrB,WAAW,CAChC;IAAA,OACEK,QAAQ,kCAAIS,KAAK,EAAC,CAACI,IAAI,CAAC,UAACC,QAAQ,EAAI;MACnC,IAAIV,SAAS,CAACW,OAAO,EAAE;QACrBT,OAAO,CAACQ,QAAQ,CAAC;;IAErB,CAAC,CAAC;EAAA,GACJ,CAACZ,IAAI,CAAC,CACP;EAEDL,SAAS,CAAC,YAAK;IACb,IAAIU,GAAG,EAAE;MACPK,cAAc,EAAE;;IAGlB,IAAI,CAACL,GAAG,IAAIC,GAAG,EAAE;MACfQ,cAAc,EAAE;;EAEpB,CAAC,EAAE,CAACT,GAAG,EAAEK,cAAc,EAAEJ,GAAG,EAAEQ,cAAc,CAAC,CAAC;EAE9CnB,SAAS,CAAC,YAAK;IACbO,SAAS,CAACW,OAAO,GAAG,IAAI;IACxB,OAAO,YAAK;MACVX,SAAS,CAACW,OAAO,GAAG,KAAK;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACV,IAAI,EAAEO,cAAc,EAAEI,cAAc,CAAC;AAC/C","names":["useCallback","useRef","useEffect","useState","askAsync","getAsync","usePermissions","type","options","isMounted","data","setData","ask","get","types","Array","isArray","askPermissions","then","response","current","getPermissions"],"sources":["C:\\reactag\\newstart3\\node_modules\\expo-permissions\\src\\PermissionsHooks.ts"],"sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.dev/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const isMounted = useRef(true);\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(\n    () =>\n      askAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  const getPermissions = useCallback(\n    () =>\n      getAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}